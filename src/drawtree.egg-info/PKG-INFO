Metadata-Version: 2.4
Name: drawtree
Version: 1.1.0
Summary: Generate TikZ code for game trees from extensive form (.ef) files
Author: Game Tree Drawing Project
License: MIT
Project-URL: Homepage, https://github.com/your-username/drawtree
Project-URL: Repository, https://github.com/your-username/drawtree.git
Project-URL: Issues, https://github.com/your-username/drawtree/issues
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Science/Research
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3.13
Classifier: Topic :: Scientific/Engineering :: Mathematics
Classifier: Topic :: Text Processing :: Markup :: LaTeX
Requires-Python: >=3.8
Description-Content-Type: text/markdown
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov; extra == "dev"
Provides-Extra: jupyter
Requires-Dist: jupyter; extra == "jupyter"
Requires-Dist: jupyter-tikz; extra == "jupyter"
Dynamic: requires-python

# DrawTree: Game Tree Visualization Package

A modern Python package for generating beautiful game tree diagrams from extensive form (.ef) files. Creates TikZ-based visualizations that can be rendered as PDF, PNG, or used directly in LaTeX documents and Jupyter notebooks.

## Installation

### From PyPI (when published)
```bash
pip install drawtree
```

### Development Installation
```bash
git clone <repository>
cd draw_tree
pip install -e .
```

## Quick Start

### Command Line Interface

Generate a PDF directly from an .ef file:
```bash
drawtree games/example.ef
```

Generate TikZ code for use in LaTeX:
```bash
drawtree games/example.ef --format tikz
```

Full CLI options:
```bash
drawtree --help
```

### Python API

The modern Python API provides a clean, simple interface:

```python
import drawtree

# Generate PDF file
pdf_path = drawtree.draw_tree('games/example.ef', render_as='pdf')
print(f"PDF created: {pdf_path}")

# Generate TikZ code for Jupyter notebooks
tikz_code = drawtree.draw_tree('games/example.ef', render_as='tikz')
print(tikz_code)

# Advanced usage with custom options
drawtree.draw_tree(
    game='games/example.ef',
    name='my_game_tree',
    render_as='png',
    output_dir='./output',
    scale=1.5,
    grid=True
)
```

### Jupyter Notebook Usage

For Jupyter notebooks, you can display TikZ diagrams directly:

```python
import drawtree

# Generate TikZ code
tikz_code = drawtree.draw_tree('games/example.ef', render_as='tikz')

# Display in Jupyter (requires %%tikz magic)
from IPython.display import display, Latex
display(Latex(tikz_code))
```

## API Reference

### `draw_tree(game, name=None, render_as='tikz', output_dir=None, scale=1.0, grid=False)`

Main function for generating game tree visualizations.

**Parameters:**
- `game` (str or Path): Path to the .ef file containing the game definition
- `name` (str, optional): Base name for output files. Defaults to game filename
- `render_as` (str): Output format - 'tikz', 'pdf', or 'png'. Default: 'tikz'
- `output_dir` (str or Path, optional): Directory for output files. Defaults to game file directory  
- `scale` (float): Scale factor for the diagram. Default: 1.0
- `grid` (bool): Whether to show grid lines. Default: False

**Returns:**
- For 'tikz': Returns the TikZ code as a string
- For 'pdf'/'png': Returns path to created file, or None if creation failed

### `create_tikz_from_file(tex_file_path, macros_file_path=None)`

Utility function to combine TikZ content with macro definitions.

**Parameters:**
- `tex_file_path` (str): Path to .tex file with tikzpicture content
- `macros_file_path` (str, optional): Path to macros file. Uses bundled macros if None

**Returns:**
- Complete TikZ code ready for use

## Dependencies

### Required
- Python 3.8+

### Optional
- **pdflatex** (from LaTeX distribution like MacTeX): Required for PDF generation
- **ImageMagick or poppler-utils**: Required for PNG generation

### Installing LaTeX on macOS
```bash
# Install MacTeX (large but complete)
brew install --cask mactex

# Or install BasicTeX (smaller)
brew install --cask basictex
sudo tlmgr update --self
sudo tlmgr install tikz-qtree
```

## Testing

The project includes a comprehensive test suite using pytest. To run the tests:

```bash
# Install development dependencies
pip install -e ".[dev]"

# Run all tests
pytest -v

# Run tests with coverage
pytest --cov=drawtree --cov-report=html

# Run specific test categories
pytest test_drawtree.py::TestUtilityFunctions -v
pytest test_drawtree.py::TestTikzGeneration -v
```

The test suite covers:
- Utility functions (mathematical operations, formatting)
- String parsing and node operations  
- File I/O operations
- TikZ code generation
- Modern package API
- Command-line interface

## Development

To set up for development:

```bash
git clone <repository>
cd draw_tree
pip install -e ".[dev]"
```

The package uses modern Python packaging with:
- `src/` layout for clean package structure
- `pyproject.toml` for modern build configuration
- Entry points for CLI commands
- Optional dependencies for development and Jupyter

## Legacy Usage

The original `drawtree_original.py` script is still available for backward compatibility, but the new package API is recommended for all new projects.
